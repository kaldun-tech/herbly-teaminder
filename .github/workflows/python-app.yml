# This workflow will install Python dependencies, run tests and lint with a single version of Python
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-python

name: Python CI

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

permissions:
  contents: read
  id-token: write

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
        aws-region: us-east-1
        
    - name: Set up Python 3.10
      uses: actions/setup-python@v4
      with:
        python-version: "3.10"
        
    - name: Cache pip packages
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
          
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        # Install Werkzeug first to ensure correct version
        pip install Werkzeug==2.0.3
        pip install Flask==2.0.1
        # Install test dependencies
        pip install flake8 pytest pylint
        # Install remaining requirements
        pip install -r requirements.txt
        
    - name: Verify dependency versions
      run: |
        echo "Checking key dependency versions..."
        pip freeze | grep -E "Flask|Werkzeug|boto3"
        
        # Verify specific versions
        python -c "
        import flask, werkzeug, boto3
        assert flask.__version__ == '2.0.1', f'Wrong Flask version: {flask.__version__}'
        assert werkzeug.__version__ == '2.0.3', f'Wrong Werkzeug version: {werkzeug.__version__}'
        assert boto3.__version__ == '1.35.0', f'Wrong boto3 version: {boto3.__version__}'
        print('All dependency versions verified!')
        "
        
    - name: Lint with pylint
      run: |
        pylint --rcfile=.pylintrc $(git ls-files '*.py')
        
    - name: Lint with flake8
      run: |
        # stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=140 --statistics
        
    - name: Test with pytest
      run: |
        pytest -v
